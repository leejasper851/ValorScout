
import java.awt.*;
import javax.swing.JTable;
import javax.swing.table.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author leeja
 */
public class ScoutingWindow extends javax.swing.JFrame {
    MainWindow mainWindow;
    MatchStat matchStat;
    
    /**
     * Creates new form ScoutingWindow
     */
    public ScoutingWindow(MainWindow mw, MatchStat ms) {
        initComponents();
        
        mainWindow = mw;
        matchStat = ms;
        
        table_scouting.setValueAt("Cross Line", 0, 0);
        table_scouting.setValueAt("Bottom", 1, 0);
        table_scouting.setValueAt("Top", 2, 0);
        table_scouting.setValueAt("Inner", 3, 0);
        table_scouting.setValueAt(0, 1, 1);
        table_scouting.setValueAt(0, 2, 1);
        table_scouting.setValueAt(0, 3, 1);
        table_scouting.setValueAt("Bottom", 0, 2);
        table_scouting.setValueAt("Top", 1, 2);
        table_scouting.setValueAt("Inner", 2, 2);
        table_scouting.setValueAt("Rot Control", 3, 2);
        table_scouting.setValueAt("Pos Control", 4, 2);
        table_scouting.setValueAt(0, 0, 3);
        table_scouting.setValueAt(0, 1, 3);
        table_scouting.setValueAt(0, 2, 3);
        table_scouting.setValueAt("Park", 0, 4);
        table_scouting.setValueAt("Hang", 1, 4);
        table_scouting.setValueAt("Level", 2, 4);
        table_scouting.setValueAt("Host", 3, 4);
        table_scouting.setValueAt(0, 3, 5);
        table_scouting.setValueAt("-1", 0, 6);
        table_scouting.setValueAt("0", 1, 6);
        table_scouting.setValueAt("1", 2, 6);
        table_scouting.setValueAt("2", 3, 6);
        table_scouting.setValueAt("3", 4, 6);
        
        for (int i = 0; i < table_scouting.getColumnCount(); i++) {
            table_scouting.setDefaultRenderer(table_scouting.getColumnClass(i), new ScoutingCellRenderer(matchStat));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane_scouting = new javax.swing.JScrollPane();
        table_scouting = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table_scouting.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Auto", "", "Teleop", "", "Endgame", "", "Defense"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_scouting.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_scoutingMouseClicked(evt);
            }
        });
        scrollPane_scouting.setViewportView(table_scouting);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane_scouting, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane_scouting, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void table_scoutingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_scoutingMouseClicked
        int clickRow = table_scouting.getSelectedRow();
        int clickCol = table_scouting.getSelectedColumn();
        if (clickRow == 0 && clickCol <= 1) {
            matchStat.setCrossLine(!matchStat.isCrossLine());
            table_scouting.setValueAt(table_scouting.getValueAt(0, 0), 0, 0);
            table_scouting.setValueAt(table_scouting.getValueAt(0, 1), 0, 1);
        }
        if (clickRow == 1 && clickCol == 0) {
            if (evt.getClickCount() == 1) {
                matchStat.setAutoShieldBottom(matchStat.getAutoShieldBottom() + 1);
            } else {
                matchStat.setAutoShieldBottom(matchStat.getAutoShieldBottom() - 2);
            }
            table_scouting.setValueAt(matchStat.getAutoShieldBottom(), 1, 1);
        }
        if (clickRow == 2 && clickCol == 0) {
            if (evt.getClickCount() == 1) {
                matchStat.setAutoShieldTop(matchStat.getAutoShieldTop() + 1);
            } else {
                matchStat.setAutoShieldTop(matchStat.getAutoShieldTop() - 2);
            }
            table_scouting.setValueAt(matchStat.getAutoShieldTop(), 2, 1);
        }
        if (clickRow == 3 && clickCol == 0) {
            if (evt.getClickCount() == 1) {
                matchStat.setAutoShieldInner(matchStat.getAutoShieldInner() + 1);
            } else {
                matchStat.setAutoShieldInner(matchStat.getAutoShieldInner() - 2);
            }
            table_scouting.setValueAt(matchStat.getAutoShieldInner(), 3, 1);
        }
        if (clickRow == 0 && clickCol == 2) {
            if (evt.getClickCount() == 1) {
                matchStat.setTeleShieldBottom(matchStat.getTeleShieldBottom() + 1);
            } else {
                matchStat.setTeleShieldBottom(matchStat.getTeleShieldBottom() - 2);
            }
            table_scouting.setValueAt(matchStat.getTeleShieldBottom(), 0, 3);
        }
        if (clickRow == 1 && clickCol == 2) {
            if (evt.getClickCount() == 1) {
                matchStat.setTeleShieldTop(matchStat.getTeleShieldTop() + 1);
            } else {
                matchStat.setTeleShieldTop(matchStat.getTeleShieldTop() - 2);
            }
            table_scouting.setValueAt(matchStat.getTeleShieldTop(), 1, 3);
        }
        if (clickRow == 2 && clickCol == 2) {
            if (evt.getClickCount() == 1) {
                matchStat.setTeleShieldInner(matchStat.getTeleShieldInner() + 1);
            } else {
                matchStat.setTeleShieldInner(matchStat.getTeleShieldInner() - 2);
            }
            table_scouting.setValueAt(matchStat.getTeleShieldInner(), 2, 3);
        }
        if (clickRow == 3 && (clickCol >= 2 && clickCol <= 3)) {
            matchStat.setRotControl(!matchStat.isRotControl());
            table_scouting.setValueAt(table_scouting.getValueAt(3, 2), 3, 2);
            table_scouting.setValueAt(table_scouting.getValueAt(3, 3), 3, 3);
        }
        if (clickRow == 4 && (clickCol >= 2 && clickCol <= 3)) {
            matchStat.setPosControl(!matchStat.isPosControl());
            table_scouting.setValueAt(table_scouting.getValueAt(4, 2), 4, 2);
            table_scouting.setValueAt(table_scouting.getValueAt(4, 3), 4, 3);
        }
        if (clickRow == 0 && (clickCol >= 4 && clickCol <= 5)) {
            matchStat.setPark(!matchStat.isPark());
            table_scouting.setValueAt(table_scouting.getValueAt(0, 4), 0, 4);
            table_scouting.setValueAt(table_scouting.getValueAt(0, 5), 0, 5);
        }
        if (clickRow == 1 && (clickCol >= 4 && clickCol <= 5)) {
            matchStat.setHang(!matchStat.isHang());
            table_scouting.setValueAt(table_scouting.getValueAt(1, 4), 1, 4);
            table_scouting.setValueAt(table_scouting.getValueAt(1, 5), 1, 5);
        }
        if (clickRow == 2 && (clickCol >= 4 && clickCol <= 5)) {
            matchStat.setLevel(!matchStat.isLevel());
            table_scouting.setValueAt(table_scouting.getValueAt(2, 4), 2, 4);
            table_scouting.setValueAt(table_scouting.getValueAt(2, 5), 2, 5);
        }
        if (clickRow == 3 && clickCol == 4) {
            if (evt.getClickCount() == 1) {
                matchStat.setHost(matchStat.getHost() + 1);
            } else {
                matchStat.setHost(matchStat.getHost() - 2);
            }
            table_scouting.setValueAt(matchStat.getHost(), 3, 5);
        }
    }//GEN-LAST:event_table_scoutingMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane_scouting;
    private javax.swing.JTable table_scouting;
    // End of variables declaration//GEN-END:variables
    
    private static class ScoutingCellRenderer extends DefaultTableCellRenderer {
        MatchStat matchStat;
        
        public ScoutingCellRenderer(MatchStat ms) {
            matchStat = ms;
        }
        
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (row % 2 == 0) {
                cell.setBackground(Color.WHITE);
            } else {
                cell.setBackground(new Color(242, 242, 242));
            }
            int col = 0;
            
            if (row == 0 && (column == 0 || column == 1)) {
                col = matchStat.isCrossLine() ? 2 : 1;
            }
            if (row == 3 && (column == 2 || column == 3)) {
                col = matchStat.isRotControl() ? 2 : 1;
            }
            if (row == 4 && (column == 2 || column == 3)) {
                col = matchStat.isPosControl() ? 2 : 1;
            }
            if (row == 0 && (column == 4 || column == 5)) {
                col = matchStat.isPark() ? 2 : 1;
            }
            if (row == 1 && (column == 4 || column == 5)) {
                col = matchStat.isHang() ? 2 : 1;
            }
            if (row == 2 && (column == 4 || column == 5)) {
                col = matchStat.isLevel() ? 2 : 1;
            }
            if (row == 0 && column == 6 && matchStat.getDefense() == -1) {
                col = 2;
            }
            if (row == 1 && column == 6 && matchStat.getDefense() == 0) {
                col = 2;
            }
            if (row == 2 && column == 6 && matchStat.getDefense() == 1) {
                col = 2;
            }
            if (row == 3 && column == 6 && matchStat.getDefense() == 2) {
                col = 2;
            }
            if (row == 4 && column == 6 && matchStat.getDefense() == 3) {
                col = 2;
            }
            
            if (col == 1) {
                cell.setBackground(Color.RED);
            }
            if (col == 2) {
                cell.setBackground(Color.GREEN);
            }
            
            cell.setForeground(Color.BLACK);
            return cell;
        }
    }
}
